#!/usr/bin/python

import sys, os
from configobj import ConfigObj
from StringIO import StringIO

aliasfile = os.environ.get("XGAR_ALIASES", None)
if aliasfile:
    aliases = ConfigObj(aliasfile, list_values = False)
else:
    default = "[origin]\n[product]\n[level]\n[timerange]\n[reftime]\n"
    aliases = ConfigObj(StringIO(default), list_values = False)

def expandAlias(cfg, str):
    # Expand the alias
    res = []
    if str == "*":
        return res
    if str.endswith("*"):
        str = str[:-1]
        for key in cfg:
            if key.startswith(val):
                res.append(key)
    else:
        res.append(cfg[str])
    return res

fields = ['dataset', 'date', 'time', 'scad', 'level', 'var', 'est']

# Read the input lines and parse them into key -> [vals] pairs
data = dict()
for idx, line in enumerate(sys.stdin):
    if idx >= len(fields): break
    key, val = line.split(":", 1)
    # Remove leading and traling spaces, and trailing commas, from val
    val = val.strip().rstrip(".")
    # Split val on commas
    data[fields[idx]] = [x.strip() for x in val.split(",")]

# Convert datasets (FIXME)
# TODO: Limiting datasets can currently only be done at harvest config time
ds = data.get("dataset", [])
if ds:
    print "TODO Datasets:", ", ".join(ds)

# Convert date (FIXME)
# TODO: Matcher does not support steps yet, and it is a problem to implement
# that in SQL
dates = data.get("date", [])
if dates:
    print "TODO Dates:", ", ".join(dates)

# Convert time (FIXME)
# TODO: Matcher does not support steps yet, and it is a problem to implement
# that in SQL
times = data.get("time", [])
if times:
    print "TODO Times:", ", ".join(times)

# Convert scad (FIXME)
# TODO: scad has a unit: we need to do conversions
scads = data.get("scad", [])
if scads:
    print "TODO Time ranges:", ", ".join(scads)

# Convert level (FIXME)
levels = data.get("level", [])
if levels:
    a = aliases["level"]
    res = []
    for l in levels:
        components = l.split(" ")
        if len(components) == 3:
            # Convert the 3 values
            res.append("GRIB,%d,%d,%d" % tuple([int(x.strip()) for x in components]))
        else:
            # Expand the alias
            res.extend(expandAlias(a, components[0].strip()))
    if res:
        print "level:%s" % " or ".join(res)

# Convert var
vars = data.get("var", [])
if vars:
    a = aliases["product"]
    res = []
    for l in vars:
        components = l.split(" ")
        if len(components) == 3:
            # Convert the 3 values
            # TODO: see if/how to do the mapping
            #res.append("GRIB,%d,%d,%d" % tuple([int(x.strip()) for x in components]))
            raise RuntimeException("Converting queries with var expressed as ccc ttt vvv is not implemented yet")
        else:
            # Expand the alias
            res.extend(expandAlias(a, components[0].strip()))
    if res:
        print "product:%s" % " or ".join(res)

# Convert est (FIXME)
# TODO: est is not yet implemented
ests = data.get("est", [])
if ests:
    print "TODO Ests:", ", ".join(ests)


#7.1   Formati di richieste di estrazione e piani
#
#
#
#<nome_dataset>				!nome del Dataset da cui estrarre
#<gg> <mm> <ccaa>				!data di emissione del GRIB
#<hh> <mi>					!ora di emissione del GRIB
#<unit> <p1> <p2> <range> 			!sequenza standard della scadenza del GRIB
#<lev_type> <l1> <l2>				!sequenza standard del livello del GRIB
#<center> <table> <par>			!sequenza standard della variabile
#<par> <s1> <s2> <s3>			!sequenza standard dell’estensione
#
#
#DATASET: ecmwf_eu111.
#DATES: 12071994,today,08081994_31081994/3,yesterday-3.
#TIMES:0000_0600,1200.
#SCAD: 0 4 0 24, ai, F*.
#LEVEL:000 123 123, G.
#VAR: t,U,V.
#EST: * 12 72, * 172 123.
#.....................
#DATASET: ecmwf_eu111.
#DATES: 12071994,today,08081994_31081994/3.
#TIMES:0000_0600,1200.
#SCAD:  *.
#LEVEL: *.
#VAR:   t,U,V.
#EST: * * *.
#
#
#
#  i.	each list begins with a colon :
# ii.	each list terminates with a period
#iii.	individual items in a list are separated by commas
#iv. 	an underscore is used to separate initial from final dates and times
# v. 	the \ or / symbol is used when a step is specified
#vi.	a mnemonic must contain at least one character
#
#
#The words DATASET, DATES, TIMES, SCAD are actually only comments - the program functions perfectly if they are ommitted; however, they make the file more readable for the user. These lines must appear in this exact order in any request block in the file plan.
#
#
#
#
#
#
#
#In the file plan, the user is able to specify -
#
#  i. 	a dataset name or an environmental variable that was previously assigned a valid dataset name.
#
#   ii.	a list of dates - this list may consist of any combination of single dates (in the form: ggmmaaaa or gg mm aaaa); an initial date, a final date, and a step in days (the program calculates all intervening dates at step intervals; if the user does not specify a step, its value defaults to 1 day); the mnemonic today (T or today) the mnemonic yesterday (Y or yesterday). Relative dates both in the future and in the past can be identified by mnemonics in the form T+n, Y+n, T-n, Y+n where n is a number of days. The mnemonics containing today and yesterday may also be used as final dates; 
#
#   iii.	a list of times - this list may consist of any combination of single times (in the form: hhmm or hh mm) an initial time, a final time, and a step in hours (the program calculates all intervening times at step intervals; if the user does not specify a step, its value defaults to 1 hour)
#
#    iv.	a list of scadenzas - this list may consist of any combination of actual scadenza values (in the form: ttt sssss sss rrr) a single * indicating that al possible scadenzas are required mnemonics to represent scadenzas a mnemonic followed by the * symbol - this indicates that the user requires all mnemonics which belong to that family of mnemonics, for example: the mnemonic F* indicates that the user requires all mnemonics which begin with an F
#
#      v.	a list of levels - this list may consist of any combination of actual level values (in the form: ttt lllll lll) a single * indicating that al possible levels are required mnemonics to represent levels a mnemonic followed by the * symbol - this indicates that the user requires all mnemonics which belong to that family of mnemonics, for example: the mnemonic G* indicates that the user requires all mnemonics which begin with an G
#
#       vi.	a list of variables - this list may consist of any combination of actual variable values (in the form: ccc ttt vvv) a single * indicating that al possible varaibles are required mnemonics to represent variables a mnemonic followed by the * symbol - this indicates that the user requires all mnemonics which belong to that family of mnemonics, for example: the mnemonic T* indicates that the user requires all mnemonics which begin with an T
#
#        vii.	a list of extension - this list may consist of any combination of actual extensions values, consistiong i triplets of numbers. Any of the number of the triplet can be substituted by a * symbol, indicating that all values present for thet element must be extracted. No mnemonic can be used for extensions. A list of different triplets can be given, separating the triplets with commas. The “est:” request is not mandatory, if omitted est: 0 0 0. is implied.
