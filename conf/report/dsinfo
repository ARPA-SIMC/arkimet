#!/usr/bin/lua

-- Report to show information for a dataset computer from its summary

Report = {
    -- Compute the string to use to represent the metadata item
    hash = function (self, name, val)
        return name..': '..tostring(val)
    end,

    -- Merged summary
    summary = arki.summary.new(),
    -- Table where we store the metadata items that we have seen
    seen = {},
    -- Table where we store a list of unique items for every metadata type
    vals = {},
    -- Ordering of types during printing
    typeorder = {},

    -- Process a metadata item
    readMetadata = function (self, md) end,

    -- Process a summary
    readSummary = function (self, s)
        -- Aggregate metadata types
        for idx, entry in ipairs(s:data()) do
            item, stats = unpack(entry)
            for name, val in pairs(item) do
                hash = name .. ":" .. tostring(val)
                if not self.seen[hash] then
                    if self.vals[name] == nil then
                        self.vals[name] = {}
                        table.insert(self.typeorder, name)
                    end
                    table.insert(self.vals[name], val)
                    self.seen[hash] = true
                end
            end
        end

        -- Aggregate this summary to the merged summary
        self.summary:add_summary(s)
    end,

    -- Produce the final report
    report = function (self)
        print("Metadata summary:")

        table.sort(self.typeorder)

        -- Print titles based on metadata items with only one value
        for idx, name in ipairs(self.typeorder) do
            local vals = self.vals[name]
            if #vals == 1 then
                print("  " .. name .. ": " .. tostring(vals[1]))
            end
        end

        -- Print details of those metadata with multiple values
        -- Aggregate metadata types
        for idx, name in ipairs(self.typeorder) do
            local vals = self.vals[name]
            if #vals > 1 then
                print("  " .. name .. ":")
                for idx, val in ipairs(vals) do
                    print("    " .. tostring(val))
                end
            end
        end

        print("Statistics:")
        print("  Number of items: " .. tostring(self.summary:count()))
        print("  Total size of items: " .. tostring(self.summary:size()) .. "b")
        -- TODO: print summary stats (counts, date ranges, ...)
--
--        keys = {}
--
--        for k in pairs(self.items) do
--            table.insert(keys, k)
--        end
--        table.sort(keys)
--
--        for i, k in pairs(keys) do
--            print (self.items[k], k)
--        end
    end
}
