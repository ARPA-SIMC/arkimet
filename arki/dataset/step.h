#ifndef ARKI_DATASET_STEP_H
#define ARKI_DATASET_STEP_H

/// Compute names for segments in an arkimet dataset

#include <string>
#include <vector>
#include <memory>

namespace arki {

namespace core {
class Time;
}

class Matcher;
namespace matcher {
class OR;
}

namespace dataset {

/**
 * Generator for filenames the dataset in which to store a metadata
 */
struct Step
{
    virtual ~Step() {}
    virtual std::string operator()(const core::Time& time) const = 0;

    /**
     * Get the timespan of a file by just looking at its path.
     *
     * Returns true if the path could be recognised, and false if it does not
     * look like path has been generated by this Step.
     */
    virtual bool path_timespan(const std::string& path, core::Time& start_time, core::Time& end_time) const = 0;

    /**
     * Check if a given path (even a partial path) can contain things that
     * match the given matcher.
     *
     * Currently it can only look at the reftime part of the matcher.
     */
    virtual bool pathMatches(const std::string& path, const matcher::OR& m) const = 0;

    /**
     * List existing paths whose segments could intersect the reftime part of
     * the given matcher
     */
    virtual void list_segments(const std::string& root, const std::string& format, const Matcher& m, std::function<void(std::string&&)> dest) const = 0;

    /**
     * Create a Step according to the given step type name.
     */
    static std::shared_ptr<Step> create(const std::string& type);

    /**
     * Return the list of available steps
     */
    static std::vector<std::string> list();
};


/**
 * Generate paths from the root of sharded datasets.
 */
struct ShardStep
{
    virtual ~ShardStep() {}

    /// Return the path to the root of the sharded dataset for this datum
    virtual std::string shard_path(const core::Time& time) const = 0;

    /**
     * Return the Step to use for the dataset shard for a datum.
     *
     * The result of substep() is the same for all Metadata elements that
     * share the same shard_path()
     */
    virtual std::shared_ptr<Step> substep(const core::Time& time) const = 0;

    /**
     * Return the time bounds of a shard given its relative path.
     */
    virtual std::pair<core::Time, core::Time> shard_span(const std::string& shard_path) const = 0;

    /**
     * List all the shards inside a directory.
     *
     * @returns a sorted vector of Time entries of the start of the time range
     *          of each shard.
     */
    virtual std::vector<std::pair<core::Time, core::Time>> list_shards(const std::string& pathname) const = 0;

    /**
     * Create a Step according to the given step type name.
     */
    static std::shared_ptr<ShardStep> create(const std::string& shard_type, const std::string& type);
};

}
}
#endif
