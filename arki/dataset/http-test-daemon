#!/usr/bin/python3

import argparse
import logging
import sys
import http.server

redirects = {
    "/config": "/test1/config",
    "/test1/config": "/test2/config",
    "/test2/config": "/final/config",
}


class RedirectHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        server_url = f"http://localhost:{self.server.server_port}"
        dest = redirects.get(self.path)
        if dest is not None:
            url = f"{server_url}{dest}"
            self.send_response(307)
            self.send_header("Location", url)
            self.end_headers()
            self.wfile.write("Redirected to {}\n".format(url).encode())
        elif self.path == "/final/config":
            self.send_response(200)
            self.end_headers()
            self.wfile.write(f"""
[test200]
type = remote
path = {server_url}/foo/dataset/test200
server = {server_url}/foo/
restrict = test

[test80]
type = remote
path = {server_url}/foo/dataset/test80
server = {server_url}/foo/

[error]
type = remote
path = {server_url}/foo/dataset/error
server = {server_url}/foo/
""".encode())
        elif self.path == "/foo/aliases":
            self.send_response(200)
            self.end_headers()
        else:
            self.send_response(404)
            self.end_headers()
            self.wfile.write("{} not found\n".format(self.path).encode())

    def log_message(self, fmt, *args, **kw):
        logging.info(fmt, *args, **kw)


class AliasesHandler(http.server.BaseHTTPRequestHandler):
    ALIASES = """
[level]
g00    = GRIB1,1 or GRIB2S,1,0,0
"""

    def do_GET(self):
        if self.path == "/aliases":
            self.send_response(200)
            self.end_headers()
            self.wfile.write(self.ALIASES.encode())
        else:
            self.send_response(404)
            self.end_headers()
            self.wfile.write("{} not found\n".format(self.path).encode())

    def log_message(self, fmt, *args, **kw):
        logging.info(fmt, *args, **kw)


class Query500Handler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        server_url = f"http://localhost:{self.server.server_port}"
        if self.path == "/config":
            self.send_response(200)
            self.end_headers()
            self.wfile.write(f"""
[test200]
type = remote
path = {server_url}/dataset/test200
server = {server_url}
restrict = test

[test80]
type = remote
path = {server_url}/dataset/test80
server = {server_url}

[error]
type = remote
path = {server_url}/dataset/error
server = {server_url}
""".encode())
        elif self.path == "/aliases":
            self.send_response(200)
            self.end_headers()
        else:
            self.send_response(500)
            self.end_headers()
            self.wfile.write("{} simulating server GET error\n".format(self.path).encode())

    def do_POST(self):
        self.send_response(500)
        self.end_headers()
        self.wfile.write("{} simulating server POST error\n".format(self.path).encode())

    def log_message(self, fmt, *args, **kw):
        logging.info(fmt, *args, **kw)


def main():
    parser = argparse.ArgumentParser(description="HTTP server to test HTTP redirects")
    parser.add_argument("--verbose", "-v", action="store_true", help="verbose output")
    parser.add_argument("--debug", action="store_true", help="debug output")
    parser.add_argument("--action", action="store", help="test action")
    # TODO: auto allocate it
    parser.add_argument("--port", action="store", default=18001, type=int, help="listening port (default: 18001)")
    parser.add_argument("--alias-file", action="store", help="alias file to use (default: an internal version)")
    args = parser.parse_args()

    # Setup logging
    FORMAT = "%(asctime)-15s %(levelname)s %(message)s"
    if args.debug:
        logging.basicConfig(level=logging.DEBUG, stream=sys.stderr, format=FORMAT)
    elif args.verbose:
        logging.basicConfig(level=logging.INFO, stream=sys.stderr, format=FORMAT)
    else:
        logging.basicConfig(level=logging.WARN, stream=sys.stderr, format=FORMAT)

    if args.action == "redirect":
        Handler = RedirectHandler
    elif args.action == "aliases":
        Handler = AliasesHandler
    elif args.action == "query500":
        Handler = Query500Handler
    else:
        raise RuntimeError("unsupported action {}".format(args.action))

    if args.alias_file:
        with open(args.alias_file, "rt") as fd:
            AliasesHandler.ALIASES = fd.read()

    with http.server.HTTPServer(("localhost", args.port), Handler) as httpd:
        print("OK {}".format(args.port))
        sys.stdout.flush()
        httpd.serve_forever()


if __name__ == "__main__":
    main()
