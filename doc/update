#!/usr/bin/python3

import os
import sys
import subprocess
import json
import re
import argparse
from inspect import cleandoc
import logging

log = logging.getLogger("main")

class Renderer:
    def __init__(self, srcdir, dstdir, testsuite):
        self.srcdir = srcdir
        self.dstdir = dstdir
        self.testsuite = testsuite
        self.testdoc_data = []
        self.read_testsuite()

        # Jinja2 template engine
        from jinja2 import Environment, FileSystemLoader
        self.jinja2 = Environment(
            loader=FileSystemLoader([
                self.srcdir,
                self.dstdir,
            ]),
            autoescape=False,
            trim_blocks=True,
        )
        self.jinja2.globals["testdoc"] = self.testdoc

    def read_testsuite_from_executable(self, src=None):
        if src is None:
            src = self.testsuite

        stdout = subprocess.check_output([src, "--doc"], universal_newlines=True)
        new_data = json.loads(stdout)
        for d in new_data:
            d["doc"] = cleandoc(d["doc"])
        return new_data

    def read_testsuite_from_cache(self, src=None):
        if src is None:
            src = self.testsuite

        with open(src, "rt") as fd:
            new_data = json.load(fd)
        return new_data

    def read_testsuite(self):
        if not self.testsuite: return

        if os.access(self.testsuite, os.X_OK):
            self.testdoc_data = self.read_testsuite_from_executable()
        else:
            self.testdoc_data = self.read_testsuite_from_cache()

    def cache_testsuite(self, dest):
        if os.path.exists(dest):
            old_cache = self.read_testsuite_from_cache(dest)
        else:
            old_cache = None

        if self.testdoc_data == old_cache:
            return

        with open(dest, "wt") as fd:
            json.dump(self.testdoc_data, fd, sort_keys=True, indent=1)

        self.testdoc_data = old_cache

    def testdoc(self, pattern):
        import fnmatch
        regex = re.compile(fnmatch.translate(pattern))
        res = []
        for d in self.testdoc_data:
            if not d["doc"]: continue
            s = d["group"] + "." + d["method"]
            if not regex.match(s): continue
            res.append(d["doc"])
        return "\n".join(res)

    def render(self, fname):
        with open(fname, "rt", encoding="utf-8") as fd:
            template = self.jinja2.from_string(fd.read())
        rendered = template.render()
        dst = fname[:-3]
        with open(dst, "wt", encoding="utf-8") as fd:
            fd.write(rendered)
        log.info("rendered %s to %s", fname, dst)


def main():
    parser = argparse.ArgumentParser(description="render arkimet documentation templates")
    parser.add_argument(
        "--verbose", "-v", action="store_true", help="verbose output")
    parser.add_argument(
        "--debug", action="store_true", help="debug output")
    parser.add_argument(
        "--srcdir", action="store", help="source directory (default, same as update script)")
    parser.add_argument(
        "--dstdir", action="store", help="destination directory (default, same as update script)")
    parser.add_argument(
        "--testsuite", action="store", help="pathname to the executable wobble testsuite to load documentation from")
    parser.add_argument(
        "--cache-testsuite", action="store", help="do not render documentation: load test suite data and write it to the given file")
    parser.add_argument(
        "src", nargs="?", help="file to render (default: all files in doc directory)")

    args = parser.parse_args()

    log_format = "%(asctime)-15s %(levelname)s %(message)s"
    level = logging.WARN
    if args.debug:
        level = logging.DEBUG
    elif args.verbose:
        level = logging.INFO
    logging.basicConfig(level=level, stream=sys.stderr, format=log_format)

    scriptdir = os.path.dirname(__file__)

    srcdir = args.srcdir or scriptdir
    dstdir = args.dstdir or scriptdir

    log.debug("source dir: %s", srcdir)
    log.debug("destination dir: %s", dstdir)

    renderer = Renderer(srcdir, dstdir, args.testsuite)

    if args.cache_testsuite:
        renderer.cache_testsuite(args.cache_testsuite)
    elif args.src:
        renderer.render(args.src)
    else:
        for root, dirs, files in os.walk("."):
            for f in files:
                if not f.endswith(".md.j2"): continue
                renderer.render(os.path.join(root, f))


if __name__ == "__main__":
    main()
