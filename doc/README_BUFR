 * Notes about scanning BUFR messages

BUFR messages are scanned in two steps: header first, then data.

Scanning happens via DB-All.e. The header is scanned in a straightforward way,
acquiring reftime, origin (from centre and subcentre) and product (from type,
subtype and local subtype).

If the BUFR message only contains one subset, and if DB-All.e can perform
physical interpretation of the message contents, then:

 - 't=<msgtype>' keyword is added to the product metadata to encode the type
   of message (synop, temp, buoy and so on, according to DB-All.e);
 - the corresponding /etc/arkimet/scan-bufr/<msgtype>.lua script is run to
   collect extra information from the message data.

Information scanned from the data are more accurate and replace information
found in the header; however, since the data section of a BUFR message cannot
always be interpreted by DB-All.e, the header is always available and provides
a good fallback.

In Python scripts and in scanning documentation, values are given either as B
variable codes (such as B01001) or as names. The names are documented in the
DB-All.e Fortran API as "Input and output parameters" and as "Variable
aliases".


 * Multisubset BUFR messages and arki-bufr-prepare

If a BUFR message contains multiple subsets, then the data section is ignored
during scanning. This is because each subset is likely to provide different
reference time or area information, resulting in an ambiguous scan.

arkimet does not dispatch messages at the subset level, but at the BUFR level.
This means that no attempt is made to dispatch each subset to its appropriate
dataset: subsets are together in a BUFR and stay together when dispatching.
Doing otherwise would mean rewriting the BUFR data, violating the arkimet
constraint that mandates that data is never ever modified during processing.

If you need to process multi-subset BUFR messages which contain data that
should be dispatched in several datasets, then you can use the
arki-bufr-prepare tool, which will split multi-subset BUFR messages into
one BUFR message per subset. That is currently the only known way to process
each subset independently.

Please note that arki-bufr-prepare reencodes the BUFR contents: it is important
that you test it on your types of BUFR data to see that no information is lost
during the process.

